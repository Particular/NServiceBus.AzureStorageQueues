namespace NServiceBus.Azure.Transports.WindowsAzureStorageQueues
{
    
    public sealed class ConnectionString : System.IEquatable<NServiceBus.Azure.Transports.WindowsAzureStorageQueues.ConnectionString>
    {
        public readonly string Value;
        public ConnectionString(string value) { }
        public bool Equals(NServiceBus.Azure.Transports.WindowsAzureStorageQueues.ConnectionString other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class UnableToDispatchException : System.Exception
    {
        public const string ExceptionMessage = "Message couldn\'t be dispatched";
        public UnableToDispatchException(System.Exception ex) { }
        protected UnableToDispatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public string Namespace { get; set; }
        public string Queue { get; set; }
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
}
namespace NServiceBus
{
    
    public sealed class AzureStorageAddressingSettings : NServiceBus.IAzureStoragePartitioningSettings
    {
        public AzureStorageAddressingSettings() { }
        public NServiceBus.IAzureStoragePartitioningSettings UseAccountNamesInsteadOfConnectionStrings() { }
    }
    public class AzureStorageQueueTransport : NServiceBus.Transports.TransportDefinition
    {
        public AzureStorageQueueTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        protected override NServiceBus.Transports.TransportInfrastructure Initialize(NServiceBus.Settings.SettingsHolder settings, string connectionString) { }
    }
    public class static AzureStorageTransportAddressingExtensions
    {
        public static NServiceBus.AzureStorageAddressingSettings Addressing(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
        public static NServiceBus.IAzureStoragePartitioningSettings Partitioning(this NServiceBus.AzureStorageAddressingSettings addressingSettings) { }
    }
    public class static AzureStorageTransportExtensions
    {
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> BatchSize(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, string value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MaximumWaitTimeWhenIdle(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MessageInvisibleTime(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MessageInvisibleTime(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> PeekInterval(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SerializeMessageWrapperWith<TSerializationDefinition>(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config)
            where TSerializationDefinition : NServiceBus.Serialization.SerializationDefinition, new () { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseSha1ForShortening(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
    }
    public interface IAzureStoragePartitioningSettings
    {
        NServiceBus.IAzureStoragePartitioningSettings AddStorageAccount(string name, string connectionString);
        NServiceBus.IAzureStoragePartitioningSettings UseAccountNamesInsteadOfConnectionStrings();
    }
}