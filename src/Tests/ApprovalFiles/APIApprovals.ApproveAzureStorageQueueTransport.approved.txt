[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class AccountInfo
    {
        public AccountInfo(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
        public AccountInfo(string alias, string connectionString) { }
        public string Alias { get; }
        public string ConnectionString { get; }
        public System.Collections.Generic.HashSet<string> RegisteredEndpoints { get; }
    }
    [System.Obsolete("Account aliases have been deprecated. Use the AzureStorageQueueTransport construc" +
        "tor that accepts fully customized Azure service clients. Will be treated as an e" +
        "rror from version 11.0.0. Will be removed in version 12.0.0.", false)]
    public class AccountRoutingSettings
    {
        [System.Obsolete("Account aliases have been deprecated. Use the AzureStorageQueueTransport construc" +
            "tor that accepts fully customized Azure service clients. Will be treated as an e" +
            "rror from version 11.0.0. Will be removed in version 12.0.0.", false)]
        public string DefaultAccountAlias { get; set; }
        [System.Obsolete("Account aliases have been deprecated. Use the AzureStorageQueueTransport construc" +
            "tor that accepts fully customized Azure service clients. Will be treated as an e" +
            "rror from version 11.0.0. Will be removed in version 12.0.0.", false)]
        public NServiceBus.AccountInfo AddAccount(string alias, Azure.Storage.Queues.QueueServiceClient connectionClient) { }
        [System.Obsolete("Account aliases have been deprecated. Use the AzureStorageQueueTransport construc" +
            "tor that accepts fully customized Azure service clients. Will be treated as an e" +
            "rror from version 11.0.0. Will be removed in version 12.0.0.", false)]
        public NServiceBus.AccountInfo AddAccount(string alias, string connectionString) { }
    }
    public class AzureStorageQueueTransport : NServiceBus.Transport.TransportDefinition, NServiceBus.Routing.IMessageDrivenSubscriptionTransport
    {
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
        public AzureStorageQueueTransport(string connectionString, bool useNativeDelayedDeliveries = true) { }
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
        public NServiceBus.AccountRoutingSettings AccountRouting { get; }
        public int? DegreeOfReceiveParallelism { get; set; }
        public NServiceBus.NativeDelayedDeliverySettings DelayedDelivery { get; }
        public System.TimeSpan MaximumWaitTimeWhenIdle { get; set; }
        public System.TimeSpan MessageInvisibleTime { get; set; }
        public System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> MessageUnwrapper { get; set; }
        public NServiceBus.Serialization.SerializationDefinition MessageWrapperSerializationDefinition { get; set; }
        public System.TimeSpan PeekInterval { get; set; }
        public System.Func<string, string> QueueNameSanitizer { get; set; }
        public int? ReceiverBatchSize { get; set; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses) { }
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class AzureStorageTransportExtensions
    {
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.AccountRoutingSettings AccountRouting(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> transportExtensions) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> BatchSize(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> DefaultAccountAlias(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> transportExtensions, string alias) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> DegreeOfReceiveParallelism(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int degreeOfReceiveParallelism) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance constructor. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 11.0." +
            "0.", true)]
        public static NServiceBus.DelayedDeliverySettings DelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MaximumWaitTimeWhenIdle(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MessageInvisibleTime(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> PeekInterval(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SanitizeQueueNamesWith(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.Func<string, string> queueNameSanitizer) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SerializeMessageWrapperWith<TSerializationDefinition>(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config)
            where TSerializationDefinition : NServiceBus.Serialization.SerializationDefinition, new () { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UnwrapMessagesWith(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> unwrapper) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance constructor. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 11.0." +
            "0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseBlobServiceClient(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, Azure.Storage.Blobs.BlobServiceClient blobServiceClient) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance constructor. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 11.0." +
            "0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseCloudTableClient(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance constructor. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 11.0." +
            "0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseQueueServiceClient(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
    }
    public class DelayedDeliverySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        [System.Obsolete("Configure the transport via the TransportDefinition constructor. The member curre" +
            "ntly throws a NotImplementedException. Will be removed in version 11.0.0.", true)]
        public void DisableDelayedDelivery() { }
        [System.Obsolete("The timeout manager has been removed in favor of native delayed delivery support " +
            "provided by transports. See the upgrade guide for more details. The member curre" +
            "ntly throws a NotImplementedException. Will be removed in version 11.0.0.", true)]
        public void DisableTimeoutManager() { }
        [System.Obsolete("Configure the transport via the TransportDefinition instance\'s properties. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 11.0" +
            ".0.", true)]
        public void UseTableName(string delayedMessagesTableName) { }
    }
    public class NativeDelayedDeliverySettings
    {
        public string DelayedDeliveryPoisonQueue { get; set; }
        public string DelayedDeliveryTableName { get; set; }
    }
}
namespace NServiceBus.Azure.Transports.WindowsAzureStorageQueues
{
    [System.Serializable]
    public class MessageWrapper : NServiceBus.IMessage
    {
        public MessageWrapper() { }
        public byte[] Body { get; set; }
        public string CorrelationId { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
        public string IdForCorrelation { get; set; }
        public NServiceBus.MessageIntentEnum MessageIntent { get; set; }
        public bool Recoverable { get; set; }
        public string ReplyToAddress { get; set; }
        [System.Obsolete("Legacy property for backwards compatibility.", false)]
        public System.TimeSpan TimeToBeReceived { get; set; }
    }
}