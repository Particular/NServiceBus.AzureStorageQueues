[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class AccountInfo
    {
        public AccountInfo(string alias, string connectionString) { }
        public AccountInfo(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Data.Tables.TableServiceClient tableServiceClient) { }
        [System.Obsolete("Use the constructor overload that accepts a TableServiceClient. The member curren" +
            "tly throws a NotImplementedException. Will be removed in version 13.0.0.", true)]
        public AccountInfo(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, object cloudTableClient) { }
        public string Alias { get; }
        public string ConnectionString { get; }
        public NServiceBus.AccountInfo AddEndpoint(string endpointName, System.Collections.Generic.IEnumerable<System.Type> publishedEvents = null, string subscriptionTableName = null) { }
    }
    public class AccountRoutingSettings
    {
        public string DefaultAccountAlias { get; set; }
        [System.Obsolete("Account aliases using connection strings have been deprecated. Use the AddAccount" +
            " overload that accepts a QueueServiceClient instance. The member currently throw" +
            "s a NotImplementedException. Will be removed in version 13.0.0.", true)]
        public NServiceBus.AccountInfo AddAccount(string alias, string connectionString) { }
        public NServiceBus.AccountInfo AddAccount(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Data.Tables.TableServiceClient tableServiceClient) { }
        [System.Obsolete("Use AddAccount that accepts a TableServiceClient. The member currently throws a N" +
            "otImplementedException. Will be removed in version 13.0.0.", true)]
        public NServiceBus.AccountInfo AddAccount(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, object cloudTableClient) { }
    }
    public class AzureStorageQueueTransport : NServiceBus.Transport.TransportDefinition, NServiceBus.Routing.IMessageDrivenSubscriptionTransport
    {
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
        public AzureStorageQueueTransport(string connectionString, bool useNativeDelayedDeliveries = true) { }
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, Azure.Data.Tables.TableServiceClient tableServiceClient) { }
        [System.Obsolete("Use the constructor overload that accepts a TableServiceClient. The member curren" +
            "tly throws a NotImplementedException. Will be removed in version 13.0.0.", true)]
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, object cloudTableClient) { }
        public NServiceBus.AccountRoutingSettings AccountRouting { get; }
        public int? DegreeOfReceiveParallelism { get; set; }
        public NServiceBus.NativeDelayedDeliverySettings DelayedDelivery { get; }
        public System.TimeSpan MaximumWaitTimeWhenIdle { get; set; }
        public System.TimeSpan MessageInvisibleTime { get; set; }
        public System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> MessageUnwrapper { get; set; }
        public NServiceBus.Serialization.SerializationDefinition MessageWrapperSerializationDefinition { get; set; }
        public System.TimeSpan PeekInterval { get; set; }
        public System.Func<string, string> QueueNameSanitizer { get; set; }
        public int? ReceiverBatchSize { get; set; }
        public NServiceBus.SubscriptionSettings Subscriptions { get; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receiversSettings, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
        [System.Obsolete("Inject the ITransportAddressResolver type to access the address translation mecha" +
            "nism at runtime. See the NServiceBus version 8 upgrade guide for further details" +
            ". Will be removed in version 13.0.0.", true)]
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class AzureStorageTransportExtensions
    {
        public static NServiceBus.AccountRoutingSettings AccountRouting(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> BatchSize(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> CacheInvalidationPeriod(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan cacheInvalidationPeriod) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.Func<string> connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, string connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> DefaultAccountAlias(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, string alias) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> DegreeOfReceiveParallelism(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, int degreeOfReceiveParallelism) { }
        public static NServiceBus.DelayedDeliverySettings DelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> DisableCaching(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config) { }
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MaximumWaitTimeWhenIdle(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> MessageInvisibleTime(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> PeekInterval(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.TimeSpan value) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SanitizeQueueNamesWith(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.Func<string, string> queueNameSanitizer) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SerializeMessageWrapperWith<TSerializationDefinition>(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config)
            where TSerializationDefinition : NServiceBus.Serialization.SerializationDefinition, new () { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> SubscriptionTableName(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, string subscriptionTableName) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UnwrapMessagesWith(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> unwrapper) { }
        [System.Obsolete("Provide the TableServiceClient with the UseTransport<AzureStorageQueues> configur" +
            "ation as a parameter. The member currently throws a NotImplementedException. Wil" +
            "l be removed in version 13.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseCloudTableClient(this NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> config, object cloudTableClient) { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.AzureStorageQueueTransport { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config, Azure.Storage.Queues.QueueServiceClient queueServiceClient)
            where T : NServiceBus.AzureStorageQueueTransport { }
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, Azure.Data.Tables.TableServiceClient tableServiceClient)
            where T : NServiceBus.AzureStorageQueueTransport { }
        [System.Obsolete("Use `Provide the TableServiceClient with the UseTransport<AzureStorageQueues> con" +
            "figuration as a parameter.` instead. The member currently throws a NotImplemente" +
            "dException. Will be removed in version 13.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureStorageQueueTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, object cloudTableClient)
            where T : NServiceBus.AzureStorageQueueTransport { }
    }
    public class DelayedDeliverySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        public void UseTableName(string delayedMessagesTableName) { }
    }
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
    }
    public class NativeDelayedDeliverySettings
    {
        public string DelayedDeliveryPoisonQueue { get; set; }
        public string DelayedDeliveryTableName { get; set; }
    }
    public class SubscriptionSettings
    {
        public System.TimeSpan CacheInvalidationPeriod { get; set; }
        public bool DisableCaching { get; set; }
        public string SubscriptionTableName { get; set; }
    }
}
namespace NServiceBus.Azure.Transports.WindowsAzureStorageQueues
{
    [System.Serializable]
    public class MessageWrapper : NServiceBus.IMessage
    {
        public MessageWrapper() { }
        public byte[] Body { get; set; }
        public string CorrelationId { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
        public string IdForCorrelation { get; set; }
        public NServiceBus.MessageIntent MessageIntent { get; set; }
        public bool Recoverable { get; set; }
        public string ReplyToAddress { get; set; }
        [System.Obsolete("Legacy property for backwards compatibility.", false)]
        public System.TimeSpan TimeToBeReceived { get; set; }
    }
}