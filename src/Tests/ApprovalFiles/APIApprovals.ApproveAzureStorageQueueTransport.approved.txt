[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureStorageQueues.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class AccountInfo
    {
        public AccountInfo(string alias, string connectionString) { }
        public AccountInfo(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
        public string Alias { get; }
        public string ConnectionString { get; }
        [System.Obsolete("Use `AddEndpoint(string endpointName, IEnumerable<Type> publishedEvents = null, s" +
            "tring subscriptionTableName = null)` instead. The member currently throws a NotI" +
            "mplementedException. Will be removed in version 11.0.0.", true)]
        public System.Collections.Generic.HashSet<string> RegisteredEndpoints { get; }
        public NServiceBus.AccountInfo AddEndpoint(string endpointName, System.Collections.Generic.IEnumerable<System.Type> publishedEvents = null, string subscriptionTableName = null) { }
    }
    public class AccountRoutingSettings
    {
        public string DefaultAccountAlias { get; set; }
        [System.Obsolete("Use `AddAccount(string alias, QueueServiceClient queueServiceClient, CloudTableCl" +
            "ient cloudTableClient)` instead. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 11.0.0.", true)]
        public NServiceBus.AccountInfo AddAccount(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
        [System.Obsolete("Account aliases using connection strings have been deprecated. Use the AddAccount" +
            " overload that accepts a QueueServiceClient instance. Will be treated as an erro" +
            "r from version 11.0.0. Will be removed in version 12.0.0.", false)]
        public NServiceBus.AccountInfo AddAccount(string alias, string connectionString) { }
        public NServiceBus.AccountInfo AddAccount(string alias, Azure.Storage.Queues.QueueServiceClient queueServiceClient, Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
    }
    public class AzureStorageQueueTransport : NServiceBus.Transport.TransportDefinition, NServiceBus.Routing.IMessageDrivenSubscriptionTransport
    {
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
        public AzureStorageQueueTransport(string connectionString, bool useNativeDelayedDeliveries = true) { }
        public AzureStorageQueueTransport(Azure.Storage.Queues.QueueServiceClient queueServiceClient, Azure.Storage.Blobs.BlobServiceClient blobServiceClient, Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
        public NServiceBus.AccountRoutingSettings AccountRouting { get; }
        public int? DegreeOfReceiveParallelism { get; set; }
        public NServiceBus.NativeDelayedDeliverySettings DelayedDelivery { get; }
        public System.TimeSpan MaximumWaitTimeWhenIdle { get; set; }
        public System.TimeSpan MessageInvisibleTime { get; set; }
        public System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> MessageUnwrapper { get; set; }
        public NServiceBus.Serialization.SerializationDefinition MessageWrapperSerializationDefinition { get; set; }
        public System.TimeSpan PeekInterval { get; set; }
        public System.Func<string, string> QueueNameSanitizer { get; set; }
        public int? ReceiverBatchSize { get; set; }
        public NServiceBus.SubscriptionSettings Subscriptions { get; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receiversSettings, string[] sendingAddresses, System.Threading.CancellationToken token = default) { }
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class AzureStorageQueueTransportApiExtensions
    {
        [System.Obsolete("Use `EndpointConfiguration.UseTransport(TransportDefinition)` instead. Will be tr" +
            "eated as an error from version 11.0.0. Will be removed in version 12.0.0.", false)]
        public static NServiceBus.AzureStorageQueueTransportLegacySettings UseTransport<T>(this NServiceBus.EndpointConfiguration config, string connectionString)
            where T : NServiceBus.AzureStorageQueueTransport { }
    }
    [System.Obsolete("Configure the transport via the AzureStorageQueueTransport properties. Will be tr" +
        "eated as an error from version 11.0.0. Will be removed in version 12.0.0.", false)]
    public class AzureStorageQueueTransportLegacySettings : NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport>
    {
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport AccountRouting propert" +
            "y. Will be treated as an error from version 11.0.0. Will be removed in version 1" +
            "2.0.0.", false)]
        public NServiceBus.AccountRoutingSettings AccountRouting() { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport ReceiverBatchSize prop" +
            "erty. Will be treated as an error from version 11.0.0. Will be removed in versio" +
            "n 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> BatchSize(int value) { }
        [System.Obsolete("Configure the transport connection string via the AzureStorageQueueTransport inst" +
            "ance constructor. The member currently throws a NotImplementedException. Will be" +
            " removed in version 11.0.0.", true)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> ConnectionString(string connectionString) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport AccountRouting.Default" +
            "AccountAlias property. Will be treated as an error from version 11.0.0. Will be " +
            "removed in version 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> DefaultAccountAlias(string alias) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport DegreeOfReceiveParalle" +
            "lism property. Will be treated as an error from version 11.0.0. Will be removed " +
            "in version 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> DegreeOfReceiveParallelism(int degreeOfReceiveParallelism) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport DelayedDelivery proper" +
            "ty. Will be treated as an error from version 11.0.0. Will be removed in version " +
            "12.0.0.", false)]
        public NServiceBus.DelayedDeliverySettings DelayedDelivery() { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport MaximumWaitTimeWhenIdl" +
            "e property. Will be treated as an error from version 11.0.0. Will be removed in " +
            "version 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> MaximumWaitTimeWhenIdle(System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport MessageInvisibleTime p" +
            "roperty. Will be treated as an error from version 11.0.0. Will be removed in ver" +
            "sion 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> MessageInvisibleTime(System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport PeekInterval property." +
            " Will be treated as an error from version 11.0.0. Will be removed in version 12." +
            "0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> PeekInterval(System.TimeSpan value) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport QueueNameSanitizer pro" +
            "perty. Will be treated as an error from version 11.0.0. Will be removed in versi" +
            "on 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> SanitizeQueueNamesWith(System.Func<string, string> queueNameSanitizer) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport MessageWrapperSerializ" +
            "ationDefinition property. Will be treated as an error from version 11.0.0. Will " +
            "be removed in version 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> SerializeMessageWrapperWith<TSerializationDefinition>()
            where TSerializationDefinition : NServiceBus.Serialization.SerializationDefinition, new () { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport MessageUnwrapper prope" +
            "rty. Will be treated as an error from version 11.0.0. Will be removed in version" +
            " 12.0.0.", false)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> UnwrapMessagesWith(System.Func<Azure.Storage.Queues.Models.QueueMessage, NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper> unwrapper) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport instance constructor. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 11.0.0.", true)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> UseBlobServiceClient(Azure.Storage.Blobs.BlobServiceClient blobServiceClient) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport instance constructor. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 11.0.0.", true)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> UseCloudTableClient(Microsoft.Azure.Cosmos.Table.CloudTableClient cloudTableClient) { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport instance constructor. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 11.0.0.", true)]
        public NServiceBus.TransportSettings<NServiceBus.AzureStorageQueueTransport> UseQueueServiceClient(Azure.Storage.Queues.QueueServiceClient queueServiceClient) { }
    }
    public class DelayedDeliverySettings : NServiceBus.Configuration.AdvancedExtensibility.ExposeSettings
    {
        [System.Obsolete("Configure delayed delivery support via the AzureStorageQueueTransport constructor" +
            ". The member currently throws a NotImplementedException. Will be removed in vers" +
            "ion 11.0.0.", true)]
        public void DisableDelayedDelivery() { }
        [System.Obsolete("The timeout manager has been removed in favor of native delayed delivery support " +
            "provided by transports. See the upgrade guide for more details. The member curre" +
            "ntly throws a NotImplementedException. Will be removed in version 11.0.0.", true)]
        public void DisableTimeoutManager() { }
        [System.Obsolete("Configure the transport via the AzureStorageQueueTransport DelayedDelivery.Delaye" +
            "dDeliveryTableName property. Will be treated as an error from version 11.0.0. Wi" +
            "ll be removed in version 12.0.0.", false)]
        public void UseTableName(string delayedMessagesTableName) { }
    }
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
    }
    public class NativeDelayedDeliverySettings
    {
        public string DelayedDeliveryPoisonQueue { get; set; }
        public string DelayedDeliveryTableName { get; set; }
    }
    public class SubscriptionSettings
    {
        public System.TimeSpan CacheInvalidationPeriod { get; set; }
        public bool DisableCaching { get; set; }
        public string SubscriptionTableName { get; set; }
    }
}
namespace NServiceBus.Azure.Transports.WindowsAzureStorageQueues
{
    [System.Serializable]
    public class MessageWrapper : NServiceBus.IMessage
    {
        public MessageWrapper() { }
        public byte[] Body { get; set; }
        public string CorrelationId { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
        public string IdForCorrelation { get; set; }
        public NServiceBus.MessageIntentEnum MessageIntent { get; set; }
        public bool Recoverable { get; set; }
        public string ReplyToAddress { get; set; }
        [System.Obsolete("Legacy property for backwards compatibility.", false)]
        public System.TimeSpan TimeToBeReceived { get; set; }
    }
}