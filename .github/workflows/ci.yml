name: CI
on:
  push:
    branches:
      - master
      - release-[8-9].*
      - release-1[0-9].*
  pull_request:
    branches-ignore:
      - release-[0-7].*
  pull_request_target:
    branches-ignore:
      - release-[0-7].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup storage accounts
        id: infra
        shell: pwsh
        run: |
          $rand = Get-Random
          $accountname1 = "pswasq$($rand)a"
          $accountname2 = "pswasq$($rand)b"
          echo "::set-output name=accountname1::$accountname1"
          echo "::set-output name=accountname2::$accountname2"
          echo "Creating storage account #1"
          $details1 = az storage account create --name $accountname1 --resource-group GitHubActions-RG --sku Standard_LRS | ConvertFrom-Json
          echo "Creating storage account #2"
          $details2 = az storage account create --name $accountname2 --resource-group GitHubActions-RG --sku Standard_LRS | ConvertFrom-Json

          echo "Getting account access keys"
          $keys1 = az storage account keys list --account-name $accountname1 --resource-group GitHubActions-RG | ConvertFrom-Json
          $keys2 = az storage account keys list --account-name $accountname2 --resource-group GitHubActions-RG | ConvertFrom-Json
          $key1 = $keys1[0].value
          $key2 = $keys2[0].value
          echo "::add-mask::$key1"
          echo "::add-mask::$key2"

          echo "Tagging storage accounts"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
          $ignore = az tag create --resource-id $details1.id --tags Package=ASQTransport RunnerOS=${{ runner.os }} $dateTag
          $ignore = az tag create --resource-id $details2.id --tags Package=ASQTransport RunnerOS=${{ runner.os }} $dateTag

          $connectString1 = "DefaultEndpointsProtocol=https;AccountName=$accountname1;AccountKey=$key1"
          $connectString2 = "DefaultEndpointsProtocol=https;AccountName=$accountname2;AccountKey=$key2"

          echo "AzureStorageQueueTransport_ConnectionString=$connectString1" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AzureStorageQueueTransport_ConnectionString_2=$connectString2" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Run Windows tests
        if: runner.os == 'Windows'
        run: dotnet test src --configuration Release --no-build -m:1 --logger "GitHubActions;report-warnings=false"
      - name: Run Linux tests
        if: runner.os == 'Linux'
        run: |
          dotnet test src --configuration Release --no-build --framework netcoreapp3.1 --logger "GitHubActions;report-warnings=false"
          dotnet test src --configuration Release --no-build --framework net5.0 --logger "GitHubActions;report-warnings=false"
      - name: Teardown storage accounts
        if: ${{ always() }}
        shell: pwsh
        run: |
          $ignore = az storage account delete --resource-group GitHubActions-RG --name ${{ steps.infra.outputs.accountname1 }} --yes
          $ignore = az storage account delete --resource-group GitHubActions-RG --name ${{ steps.infra.outputs.accountname2 }} --yes
